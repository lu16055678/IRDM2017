 
   
    
    
    
      Department of Computer Science 
    
 
     
       
    
 
   
 
    
    
    
     
     
      
      
      
      
    
 
     
     › Home
      ›› Current Students
      ›› Syllabus Index 2017-2018 (Provisional)
      ›› COMPGL ›› COMPGL04 - Verification and Mechanised Proofs 
    
 
   
 
    
    
    
     
     
      
      
       
       
       
        
        
        
         Mobile Version

        
 
       
 
        
      
 
       
       
       
        
       	Home
	Prospective Students
	Research
	Industry & Outreach
	Careers
	Current Students
	People
	About Us
	Women in Computer Science
	Staff Intranet

 
        
      
 
       
       
       
        
        
       
 
        
      
 
       
       
       
        
       
        
         
          
           
            
           

          
 
          
           
            
           

          
 
          
           
            
           

          
 
          
           
            
           

          

         

        

       
 
        
      
 
       
       
       
        
       
        Forthcoming Events

       
 
        
        
        
         
         	 New events will be posted here as soon as details become known. 


        
 
       
 
        
      
 
       
       
       
        
       
        
         
          
         

        

        

       
 
        
      
 
       
       
       
        
       
        

        
         
          
           
            
           

          
 
          
           
            
           

          

         

        

       
 
        
      
 
       
       
       
        
       
        
         
          
           
            
           

          

         
 
         
          
           
            
           

          

         

        

       
 
        
      
 
       
       
     
 
      
      
      
       
       COMPGL04 - Verification and Mechanised Proofs

       This database contains the 2017-18 versions of syllabuses. These are still being finalised and changes may occur before the start of the session.

       Syllabuses from the 2016-17 session are available here.

        
         
         
          
         	Code	COMPGL04 (also taught as COMPM087)
	Year	MSc
	Prerequisites	N/A
	Term	2
	Taught By	Ilya Sergey (100%)
	Aims	
             	Provide solid background on the formal and mechanised reasoning about mathematical theories and program correctness.
	Provide practical experience of working with production-quality state of the art tool for interactive theorem proving and program verification.


	Learning Outcomes	At the outcome of the module, students will be equipped with understanding of dependent types and constructive logic to the extent of being able to encode theories from discrete mathematics and prove theorems about them in a computer-assisted framework. 
Studnets will also become acquainted with the main ideas of program verifications (such as reasoning about safety of programs) and ways to implement and employ them in a verification tool.
 

 
          
        
 
         
         
         
          
         
          Content

         
 
          
          
         This is an introductory module to the area of mechanised mathematical reasoning and interactive program verification. The module will be structured to make use of the Coq Proof Assistant – a dependently-typed programming language and a general-purpose tool for interactive mathematical proofs. 
 
         The lectures will be building on the existing teaching material from the similar classes taught at University of Pennsylvania and MIT, as well as on the tutor’s lecture notes developed previously. 
 
         In the first half of the lectures, the basics of dependently-typed programming and its relationship to constructive logics will be explained, followed by an introduction to the standard practices of encoding mathematical theories and interactive theorem proving. The lectures will be accompanied by live demonstrations of interactive reasoning about simple mathematical structures (such as natural numbers, lists and monoids) and proofs in first-order propositional logic. 
 
         In the second part of the module, the tutor will introduce the students to the basics of the theory of programming languages and their semantics, followed by the series of topics on type systems, program logics and interactive program verification. The students will learn how to prove soundness of language extension as well as how to formally establish safety properties of functional and imperative programs. 
 
         Thorough the module, the students will be offered a series of homework exercises, to be conducted in Coq, as a way to get a hands-on experience of using the taught material in practice. At the end of the course, they will be offered a coursework project on formalising and proving a simple mathematical fact of their choice. 
 
         Teaching material:

         	I. Sergey. Programs and Proofs: Mechanizing Mathematics with Dependent Types. Lecture notes with exercises (ilyasergey.net/pnp)
	Pierce et al. Software Foundations (www.cis.upenn.edu/~bcpierce/sf)
	A. Chlipala. Certified Programming with Dependent Types (adam.chlipala.net/cpdt)

 
          
        
 
         
         
         
          
         
          Method of Instruction

         
 
          
          
         3 hours of lectures and 2 hours of lab sessions per week.
 
          
        
 
         
         
         
          
         
          Assessment

         
 
          
          
         The course has the following assessment components:

         	Coursework (50%)
	5 Programming Exercises (50% [10% per exercise])


         To pass this course, students must:

         	Obtain an overall pass mark of 50% for all sections combined.

 
          
        
 
         
       
 
      
 
       
     
 
      
    
 
     
   
 
    
    
    
     
     
      This page was last modified on 04 Apr 2017 and is maintained by 
      Teaching Administrator 
     
 
    
 
     
      
      Computer Science Department 
 
      University College London 
 
      Gower Street 
 
      London 
 
      WC1E 6BT 
 
     
 
      
        +44 (0)20 7679 7214 
 
     
 
      
         
     
 
      
     
 
    
 
     
      
      	 Disclaimer| 
	 Cookies| 
	 Accessibility| 
	 Privacy| 
	 Advanced Search| 
	 Help 

 
     
 
      
      Copyright © 1999- 2017 UCL 
 
     
 
      
     
 
    
 
   
 
    
   
 
  
  
 
